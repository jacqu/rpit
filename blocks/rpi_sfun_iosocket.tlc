%% File : rpi_sfun_iosocket.tlc
%% Created : Fri Dec 09 16:50:20 2022
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "rpi_sfun_iosocket.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  rpi_sfun_iosocket "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign intType = LibGetDataTypeNameFromId(::CompiledModel.tSS_INTEGER)
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "rpi_sfun_iosocket_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void rpi_sfun_iosocket_Start_wrapper_accel(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    SFB_EXTERN_C void rpi_sfun_iosocket_Outputs_wrapper_accel(%<realType> *y0,
			const %<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    SFB_EXTERN_C void rpi_sfun_iosocket_Update_wrapper_accel(const %<realType> *u0,
			%<realType> *y0,
			%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    SFB_EXTERN_C void rpi_sfun_iosocket_Terminate_wrapper_accel(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "rpi_sfun_iosocket_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void rpi_sfun_iosocket_Start_wrapper(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    extern void rpi_sfun_iosocket_Outputs_wrapper(%<realType> *y0,
			const %<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    extern void rpi_sfun_iosocket_Terminate_wrapper(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);

    extern void rpi_sfun_iosocket_Update_wrapper(const %<realType> *u0,
			%<realType> *y0,
			%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    void rpi_sfun_iosocket_Start_wrapper_accel(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5){
    rpi_sfun_iosocket_Start_wrapper(xD,
			rpi_Ts, p_width0,
			rpi_ip1, p_width1,
			rpi_ip2, p_width2,
			rpi_ip3, p_width3,
			rpi_ip4, p_width4,
			rpi_port, p_width5);
    }
    void rpi_sfun_iosocket_Outputs_wrapper_accel(%<realType> *y0,
			const %<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5){
    rpi_sfun_iosocket_Outputs_wrapper(y0,
			xD,
			rpi_Ts, p_width0,
			rpi_ip1, p_width1,
			rpi_ip2, p_width2,
			rpi_ip3, p_width3,
			rpi_ip4, p_width4,
			rpi_port, p_width5);
    }

    void rpi_sfun_iosocket_Update_wrapper_accel(const %<realType> *u0,
			%<realType> *y0,
			%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5){
    rpi_sfun_iosocket_Update_wrapper(u0,
			y0,
			xD,
			rpi_Ts, p_width0,
			rpi_ip1, p_width1,
			rpi_ip2, p_width2,
			rpi_ip3, p_width3,
			rpi_ip4, p_width4,
			rpi_port, p_width5);
    }
    void rpi_sfun_iosocket_Terminate_wrapper_accel(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5){
    rpi_sfun_iosocket_Terminate_wrapper(xD,
			rpi_Ts, p_width0,
			rpi_ip1, p_width1,
			rpi_ip2, p_width2,
			rpi_ip3, p_width3,
			rpi_ip4, p_width4,
			rpi_port, p_width5);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void rpi_sfun_iosocket_Start_wrapper(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);

    SFB_EXTERN_C void rpi_sfun_iosocket_Outputs_wrapper(%<realType> *y0,
			const %<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);
    SFB_EXTERN_C void rpi_sfun_iosocket_Update_wrapper(const %<realType> *u0,
			%<realType> *y0,
			%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);

    SFB_EXTERN_C void rpi_sfun_iosocket_Terminate_wrapper(%<realType> *xD,
			const %<realType> *rpi_Ts, const %<intType> p_width0,
			const %<uint8Type> *rpi_ip1, const %<intType> p_width1,
			const %<uint8Type> *rpi_ip2, const %<intType> p_width2,
			const %<uint8Type> *rpi_ip3, const %<intType> p_width3,
			const %<uint8Type> *rpi_ip4, const %<intType> p_width4,
			const %<uint32Type> *rpi_port, const %<intType> p_width5);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
  /* %<Type> Block: %<Name> */
{
  %<realType> initVector[1] = {0};
  %assign rollVars = ["<dwork>/DSTATE"]
  %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
  %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
    %if %<LibBlockDWorkWidth(DSTATE)> == 1
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
    %else
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
    %endif
  %endroll
}


%endfunction

%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
    %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else
    %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    rpi_sfun_iosocket_Start_wrapper_accel(%<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %else
    rpi_sfun_iosocket_Start_wrapper(%<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
    %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else
    %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    rpi_sfun_iosocket_Outputs_wrapper_accel(%<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %else
    rpi_sfun_iosocket_Outputs_wrapper(%<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %endif

  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%
%%
%function Update(block, system) Output
    /* S-Function "rpi_sfun_iosocket_wrapper" Block: %<Name> */
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
    %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else
    %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif
    %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    rpi_sfun_iosocket_Update_wrapper_accel(%<pu0>, %<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %else
    rpi_sfun_iosocket_Update_wrapper(%<pu0>, %<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %endif

  %%
%endfunction
%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
    %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else
    %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    rpi_sfun_iosocket_Terminate_wrapper_accel(%<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %else
    rpi_sfun_iosocket_Terminate_wrapper(%<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  %endif

%endfunction

%% [EOF] rpi_sfun_iosocket.tlc

